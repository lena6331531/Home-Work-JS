Какие есть типы данных в JS?

- Динамическая типизация: В процессе работы компьютерные программы манипулируют различными значениями, каждое из которых может быть обработано в языке программирования и относится к определённому типу данных.
В JavaScript типы данных можно разделить на две категории: простые (их также называют примитивными) типы и составные (их также называют ссылочными или объекты).
- Простые (их также называют примитивными) типы:
логический (англ. Boolean) — может принимать два возможных значения, иногда называемых истиной (true) и ложью (false);
нулевой (англ. Null) – значение null представляет ссылку, которая указывает, обычно намеренно, на несуществующий или некорректный объект или адрес;
неопределённый (англ. Undefined) – обозначает предопределенную глобальную переменную, инициализированную неопределенным значением;
числовой (англ. Number) – числовой тип данных в формате 64-битного числа двойной точности с плавающей запятой;
строковый (англ. String) – представляет собой последовательность символов, используемых для представления текста;
символ (англ. Symbol​) — тип данных, экземпляры которого уникальны и неизменяемы. (новый в ECMAScript 6).
- Объектный (англ. Object) – это коллекция именованных значений, которые обычно называют свойствами (properties) объекта.

В JavaScript есть 8 основных типов.

number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
bigint для целых чисел произвольной длины.
string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
boolean для true/false.
null для неизвестных значений – отдельный тип, имеющий одно значение null.
undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
object для более сложных структур данных.
symbol для уникальных идентификаторов.

В чем отличие простого от сложного типа данных?

Объекты - это такая структура данных, которая содержит в себе пары «ключ-значение». При значением может быть любой из типов данных (и это будет свойство объекта) или функция (и это будет метод объекта).
простые – это не объекты. 

Какое бывает копирование?
***


Приведите пример строчных данных в реальной жизни.
name, clinic, dateOfBirth....

Приведите пример числовых данных в реальной жизни.
age, year, payment...

Какие бывают операторы по количеству операндов?
Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».
Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный.
let x = 1;
x = -x;
alert( x ); // -1, применили унарный минус

Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
let x = 1, y = 3;
alert( y - x ); // 2, бинарный минус вычитает значения

Приведите пример 5 операторов.

Сложение +,
Вычитание -,
Умножение *,
Деление /,
Взятие остатка от деления %,
Возведение в степень **.

В чем отличие конкатенации от сложения?
Конкатенации - так называемое сложение и преобразование строк — это особенность бинарного плюса +.
alert(2 + 2 + '1' ); // будет "41", а не "221" (после строки , далее будет преобразовано числа в строку alert(2 + 2 + '1' + 2 + 2 ); // будет "4122")
(Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.)
Унарный + преобразует не число в число,  let x = 1; alert( +x ); // 1 ,      alert( +"" );   // 0

Опишите основные правила именования переменных.

Верблюжья нотация (CamelCase): MyClass   предпочтительна!
Змеиная нотация (snake_case): my_const
Шашлычная нотация (kebab-case): my-data

Переменные именуются существительное в lower camelCase:
Классы именуются существительное с заглавной буквы в CamelCase:
Действия/Функции именуются с глаголами - checkNumberIsEven — сразу понятно, что функция проверяет число на чётность.
Массив — существительное в множественном числе: cats, dogs;
Константы именуются в стиле snake_case заглавными буквами UPPER_CASES
не используются зарезервированные слова (let, var, return ....)