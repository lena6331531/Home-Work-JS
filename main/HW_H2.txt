Вопросы

Что делают теги abbr, cite, code, del, dfn, ins ?

- abbr: указывает, что это аббревиатура, т е краткое название чего-то.
В атрибуте title данного тега указывается расшифровка, при этом по наведению на текст тега появится всплывающая подсказка 
например UA , а расшифровка/подсказка - Украина/Urkaine

- cite:  предназначен для выделения названия работы (например, книг, песен, фильмов, живописи, разных шоу и тд).
Текст, заключенный в элемент <cite>, помечается курсивным начертанием.

- code: определяет программный код.
К категории программного кода относят имена переменных, ключевые слова, тексты функции и т.д. Обычно браузеры отображают содержимое тега <code> как моноширинный текст уменьшенного размера.

- del: выделяет текст, который был удалён в новой версии документа. В браузере этот текст перечёркивается

- dfn: обычно используется в документе, когда упоминается какой-нибудь новый термин (при первом появлении), содержимое тега браузеры в основном выделяют курсивным начертанием.

- ins:  выделяет текст, который был добавлен в новой версии документа. В браузере этот текст подчёркивается.


За что отвечает тег meta и аттрибуты expires, refresh, autor, copyright, keywords, description?
- обеспечивает метаданные о HTML документе. Метаданные не отображаются на странице, но интерпретируются браузерами и поисковыми системами.
Мета элементы, как правило, используются, чтобы указать описание страницы, ключевые слова, автора документа и другие метаданные.

- expires: управление кэшированием. Если указанная в теге дата прошла, то браузер должен сделать повторный сетевой запрос.
Дата должна указываться в стандарте [RFC850]. <meta http-equiv="Expires" content="Sun, 01 Jan 2012 00:00:01 GMT" />

- refresh: определение задержки времени в секундах, после которой браузер автоматически обновляет документ. 
<meta HTTP-EQUIV="Refresh" content ="4; URL=http://www.google.com/">

- autor: используется для указания авторства и авторских прав
<meta name="author" content="Текст" />

- copyright: используется для указания авторства и авторских прав
<meta name="copyright" lang="ru" content="Текст" />

- keywords: используется поисковыми системами для оценки релевантности. Слова, содержащиеся в теге Keywords, рассматриваются поисковыми системами как рекомендация.
При формировании списка ключевых слов для мета тега Keywords необходимо использовать слова, содержащиеся в тексте документа.
<meta name="Keywords" content="пример">

- description: предназначен для управления индексацией.
Static — Нет необходимости индексировать эту страницу в будущем.
Dynamic — Индексировать эту страницу регулярно (по умолчанию).
Режим "Static" предназначен для страниц, которые не меняются в принципе. Если содержание вашей страницы периодически меняется, то использовать этот тег необязательно. 
<meta name="Document-state" content ="Dynamic">


Назовите 10 строчных тегов?
- Тег <i> Устанавливает курсивное начертание шрифта.
- Тег <br> Перенос строки.
- Тег <a> Является одним из важных элементов HTML и предназначен для создания ссылок.
- Тег <u> Добавляет подчеркивание к тексту.
- Тег <sup> Отображает шрифт в виде верхнего индекса.
- Тег <sub> Отображает шрифт в виде нижнего индекса.
- Тег <strong> Акцентирует текст, обычно жирным начертанием.
- Тег <span> Универсальный строчный элемент.
- Тег <code> Предназначен для отображения текста программного код.
- Тег <cite> Помечает текст как цитату или сноску на другой материал.

Назовите 10 блочных тегов?
- Тег <body> Представляет собой контент (содержимое) документа HTML. В документе может быть только один элемент <body>.
- Тег <header> Представляет собой вводный контент, обычно группу вводных или навигационных средств. Он может содержать другие элементы-заголовки, а также логотип, форму поиска, имя автора и другие элементы.
- Тег <footer> Представляет собой нижний колонтитул (футер, подвал) для своего ближайшего секционного контента или секционного корня. Футер обычно содержит информацию об авторе раздела, информацию об авторском праве или ссылки на связанные документы.
- Тег <section> Представляет собой автономный раздел — который не может быть представлен более точным по семантике элементом — внутри HTML-документа. Как правило, но не всегда, разделы имеют заголовок.
- Тег <aside> Представляет собой часть документа, чьё содержимое только косвенно связанно с основным содержимым документа. Чаще всего представлен в виде боковой панели, сносок или меток.
- Тег <div> Является универсальным контейнером для потокового контента. Он не влияет на контент или макет до тех пор, пока не будет стилизован с помощью CSS.
- Тег <p> Всегда начинается с новой строки, абзацы текста идущие друг за другом разделяются между собой отбивкой.
- Тег <form> Устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
- Тег <h1.....h6> Представляют собой 6 уровней заголовков секций. <h1> это наибольший заголовок и<h6> - наименьший.
- Тег <ul, ol> ul - используется для неупорядоченного списка - в частности для маркированного списка. ol - используется для упорядоченного списка — в частности для пронумерованного списка.



Приведите 10 примеров использования CSS-объявления свойство:значение?
- * Выбирает все элементы
- .class - селектор выбирает элементы, основываясь на значении их атрибута class.
- #id - выбирает элементы, основываясь на значении их id атрибута
- [attr=value] - выбирает все элементы, имеющие данный атрибут или атрибут с определённым значением.
- <h>, <div>, <p>.... - выбирает все элементы по данному тегу.
- a[title] - выбирает элементы, основываясь на наличии у них конкретного атрибута.
- :hover - выбирает элементы, основываясь на наличии у них псевдоклассов, которые стилизуют определённое состояние элемента. Псевдокласс :hover, например, применяет правило, только если на элемент наведён курсор мыши
- p::first-line - выбирает элементы, основываясь на наличии у них определенной части элемента (вместо целого элемента).
- :nth-child - находит один или более элементов, основываясь на их позиции среди группы соседних элементов.
- :last-child - находит любой элемент, являющийся последним в его родителе.

Практика

Скопируйте текст на странице в свой код и сверстайте в соответствии с требованиями, описанными в скобках(скобки и текст в скобках в итоговом варианте должны отсутствовать)

(Главный заголовок. Размер текста 40px)
10 ознак того, що ви гарний веб-розробник

(Абзац, серый цвет, подчеркнутый, размер текста 35px)
11 серпня 2016 11:56 OlegWock 8203 5

(Абзац, черный цвет)
Ось ви знаєте як зробити той чи інший сайт, але чи заслуговуєте ви звання класного веб-розробника? Ось 10 ознак гарного веб розробника. Сподіваюсь, у вас буде 10/10.

(Заголовок второго уровня)
Ви використовуєте фреймворк
(Абзац, темно-серый цвет)
Навіть якщо ви супер-зірка розробки — фреймворк необхідна річ. Він представляє купу корисних бібліотек і нав'язує гарні практики замість того, щоб ви винаходили свої велосипеди. А як приємний бонус, ви отримуєте шаблонізацію, красиві URL, управління сесіями, зручний інтерфейс роботи з БД (ORM) та багато іншого. Використання фреймворка зменшує кількість написаного коду та ризик отримати дірку в безпеці вашого сайту. Тому ви однозначно повинні використовувати хоч один. Тут можна знайти дуже великий список.

(Заголовок второго уровня)
Ви використовуєте систему контролю версій
(Абзац, черный цвет)
СКВ дозволяє відслідковувати кожну зміну в вашому коді, порівнювати різні його версії, організовувати відокремлену роботу над різними версіями. (Полужирный)Git(/Полужирный) — найпопулярніша на сьогодні СКВ. Перетворити папку проекту в репозитарій можна всього однією командою. Досвідчені розробники використовують багато команд гіту, що розкривають його весь потенціал. Але якщо ви не знаєте команд, не біда — багато IDE мають візуальний інтерфейс для роботи з СКВ. На (Курсив)Codeguida(/Курсив) є корисне керівництво по Git.

(Заголовок второго уровня)
Ви повторно використовуєте код
(Абзац, темно-серый цвет)
Бажання писати власні велосипеди та синдром неприйняття чужої розробки часто доставляють проблем. Ви можете цілий день провести за написанням коду і відчувати себе дуже продуктивним. А потім витратити півхвилини на пошук в Google і знайти бібліотеку, що робить те ж саме. Гарні розробники використовують пакети для своєї мови програмування. Кожна мова програмування має власні онлайн-репозитарії пакетів. Для (Полужирный)PHP(/Полужирный) — (Курсив)Packagist(/Курсив), для (Полужирный)Node(/Полужирный) — (Курсив)NPM(/Курсив), для (Полужирный)Ruby(/Полужирный) — (Курсив)Gems(/Курсив), (Полужирный)Python(/Полужирный) — (Курсив)PyPi(/Курсив) та (Полужирный)інші(/Полужирный).

(Заголовок второго уровня)
Ви пишете тести
(Абзац, черный цвет)
Не можна довіряти своєму коду. Якийсь баг там гарантовано буде, не дивлячись на те, що все працює. Особливо, якщо ваш додаток взаємодіє з користувачем. І тому ви повинні писати тести для свого коду. Це покращує якість тестування і не займає так багато часу. Автоматичне тестування буває різним. Ваш фреймворк, скоріше за все, має вбудований функціонал для тестування, тому є сенс почитати документацію. Також слід поглянути в сторону selenium, що дозволяє писати тести, що імітують справжнього користувача.

(Заголовок второго уровня)
Ви турбуєтесь про безпеку
(Абзац, темно-серый цвет)
(Курсив)CSRF, SQL-ін'єкції, XSS, MITM(/Курсив) атаки це лише невеличка частина вразливостей, що можна знайти на веб-сайтах. Зазвичай, деякий захист від них вже вбудовано в ваш веб-фреймворк, але ви особисто повинні знайти що це таке і як його уникнути.

(Заголовок второго уровня)
Ви документуєте свій код
(Абзац, черный цвет)
Досвідчені розробники знають, що код пишуть один раз, а читають — багато. І тому його потрібно писати зрозумілим, в чому і допомагає документація. Багато мов притримуються одного принципу написання коментарів-документації: коментар знаходиться перед класом, методом чи функцією та описує що вона робить, які аргументи приймає та що повертає. Дотримання єдиного стандарту робить можливим динамічне використання документації в (Курсив)IDE(/Курсив) або створення на її базі повноцінних доків в HTMl.

(Абзац, черный цвет)
Також гарним тоном вважають опис архітектури та технічних рішень вашого сайту в окремому документі або wiki. Це дозволяє новим розробникам швидко орієнтуватися в проекті.

(Заголовок второго уровня)
Ви можете налаштувати веб-сервер з нуля
(Абзац, темно-серый цвет)
Базові навички адміністрування потрібні всім веб-розробникам. Адже після написання сайту він працює на спеціально налаштованому сервері, і знання того, як він працює допомагає швидше виправляти помилки і економити на хостингу. Ось корисні гайди по системному адмініструванню.

(Заголовок второго уровня)
Ви слідкуєте за новими інструментами та бібліотеками
(Абзац, черный цвет)
Веб-розробка дуже динамічна частина індустрії розробки. Кожен рік виходить велика кількість нових інструментів. Тому досвідчений розробник повинен слідкувати за новинками і відбирати серед цієї купи корисні інструменти, що мають активну спільноту та гарну документацію.

(Заголовок второго уровня)
Ви ефективно керуєте своїм часом
(Абзац, темно-серый цвет)
Всім нам знайомо коли ви декілька годин сидите перед монітором і робите все, крім потрібного. Так от, гарні розробники так не роблять. Вони знають ціну свого часу і планують день, тиждень, місяць так, щоб якомога ефективніше справлятися зі своїми задачами. Вони починають з дрібниць і в запалі переходять на задачі складніше, вони знають де працюють краще: дома, в офісі чи в кав'ярні. Тут можна почитати про управління часом.

(Заголовок второго уровня)
Ви бережете своє здоров'я
(Абзац, черный цвет)
Ми проводимо в сидячому положенні близко восьми годин в день, а то й більше. І тому знання того, як залишатися здоровим дуже важливе. Потрібно знати як запобігти болям в спині, проблем з зором, зайвою вагою і тд. Це не важко, слід лише час від часу виконувати фізичні вправи та дотримуватися правил користування електронною технікою.

(Абзац, серый цвет, размер шрифта 35px, выравнивание по правому краю, полужирный)
А скільки пунктів у вас? Пишіть в коментарі

(Абзац, красный цвет, размер шрифта 15px, выравнивание по центру)
(Полужирный)Источник:(/Полужирный) **(Курсив)https://codeguida.com/post/492/**(/Курсив)